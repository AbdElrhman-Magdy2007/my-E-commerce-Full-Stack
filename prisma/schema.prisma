// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model User {
//   id            String         @id @default(uuid())
//   email         String         @unique
//   password      String
//   name          String
//   image         String?
//   phone         String?
//   streetAddress String?
//   postalCode    String?
//   role          UserRole       @default(USER)
//   city          String?
//   country       String?
//   createdAt     DateTime       @default(now()) // تصحيح من creatadAt إلى createdAt
//   updatedAt     DateTime       @updatedAt
//   orders        OrderProduct[]
//   accounts      Account[]
//   sessions      Session[]       // تصحيح الاسم من Session إلى sessions للتوافق مع التسمية القياسية

//   @@index([email]) // فهرس لتحسين البحث عن البريد الإلكتروني
// }

// model Account {
//   id                 String    @id @default(cuid())
//   userId             String
//   providerType       String
//   providerId         String
//   providerAccountId  String
//   refreshToken       String?
//   accessToken        String?
//   accessTokenExpires DateTime?
//   createdAt          DateTime  @default(now())
//   updatedAt          DateTime  @updatedAt
//   user               User      @relation(fields: [userId], references: [id])

//   @@unique([providerId, providerAccountId])
// }

// model Product {
//   id          String         @id @default(cuid())
//   name        String
//   description String
//   image       String
//   order       Int            @default(autoincrement())
//   basePrice   Float
//   createdAt   DateTime       @default(now())
//   updatedAt   DateTime       @updatedAt
//   sizes       Size[]
//   extras      Extra[]
//   orders      OrderProduct[]
//   category    Category       @relation(fields: [categoryId], references: [id])
//   categoryId  String
// }

// model Session {
//   id           String   @id @default(cuid())
//   userId       String
//   expires      DateTime
//   sessionToken String   @unique
//   accessToken  String   @unique
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   user         User     @relation(fields: [userId], references: [id])

//   @@index([sessionToken]) // فهرس لتحسين البحث عن الجلسات
// }

// model VerificationRequest {
//   id         String   @id @default(cuid())
//   identifier String
//   token      String   @unique
//   expires    DateTime
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt

//   @@unique([identifier, token])
// }

// model Size {
//   id        String      @id @default(cuid())
//   name      ProductSize
//   price     Float
//   Product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
//   productId String
// }

// model Extra {
//   id        String           @id @default(cuid())
//   name      ExtraIngredients
//   price     Float
//   Product   Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
//   productId String
// }

// model Category {
//   id       String    @id @default(uuid())
//   name     String
//   order    Int       @default(autoincrement())
//   products Product[]
// }

// model Order {
//   id            String         @id @default(uuid())
//   paid          Boolean        @default(false)
//   subTotal      Float
//   deliveryFee   Float
//   totalPrice    Float
//   userEmail     String
//   phone         String
//   streetAddress String
//   postalCode    String
//   products      OrderProduct[]
//   city          String
//   country       String
//   createdAt     DateTime       @default(now()) // تصحيح من creatadAt إلى createdAt
//   updatedAt     DateTime       @updatedAt
// }

// model OrderProduct {
//   id        String   @id @default(cuid())
//   quantity  Int
//   user      User?    @relation(fields: [userId], references: [id])
//   userId    String?
//   product   Product  @relation(fields: [productId], references: [id])
//   productId String
//   order     Order    @relation(fields: [orderId], references: [id])
//   orderId   String
// }

// enum ProductSize {
//   SMALL
//   MEDIUM
//   LARGE
// }

// enum ExtraIngredients {
//   CHEESE
//   BACON
//   TOMATO
//   ONION
//   PEPPER
// }

// enum UserRole {
//   USER
//   ADMIN
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String
  image         String?
  phone         String?
  streetAddress String?
  postalCode    String?
  role          UserRole       @default(USER)
  city          String?
  country       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orders        OrderProduct[] // إلغاء ارتباط المنتجات
  accounts      Account[] // حذف الحسابات
  sessions      Session[] // حذف الجلسات
  Orders        Order[] // حذف الطلبات

  @@index([email])
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, providerAccountId])
}

model Product {
  id                   String                 @id @default(cuid())
  name                 String
  description          String
  image                String
  order                Int                    @default(autoincrement())
  basePrice            Float
  limit                Int?                    @default(1)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  sizes                Size[]
  extras               Extra[]
  orders               OrderProduct[]
  category             Category               @relation(fields: [categoryId], references: [id])
  categoryId           String
  Order                Order[]
  DewnloadVerification DewnloadVerification[]
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionToken])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Size {
  id        String      @id @default(cuid())
  name      ProductSize
  price     Float
  Product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Extra {
  id        String           @id @default(cuid())
  name      ExtraIngredients
  price     Float
  Product   Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

//categories
model Category {
  id       String    @id @default(cuid())
  image    String
  name     String
  order    Int       @default(autoincrement())
  products Product[]
}

model Order {
  id            String         @id @default(cuid())
  paid          Boolean        @default(false)
  subTotal      Float
  deliveryFee   Float
  totalPrice    Float
  userEmail     String
  phone         String
  streetAddress String
  postalCode    String
  products      OrderProduct[]
  city          String
  country       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  productsCount Int            @default(0)
  userId        String
  productId     String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  product       Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model DewnloadVerification {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model OrderProduct {
  id        String  @id @default(cuid())
  quantity  Int
  user      User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
}

enum ProductSize {
  SMALL
  MEDIUM
  LARGE
}

enum ExtraIngredients {
  CHEESE
  BACON
  TOMATO
  ONION
  PEPPER
}

enum UserRole {
  USER
  ADMIN
}
